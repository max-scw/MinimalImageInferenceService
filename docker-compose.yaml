services:
  basler-camera-service:
    container_name: camera-adapter
    image: maxscw/baslercameraadapter:v0.4.25
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - LOGGING_LEVEL=DEBUG
#      - PREFIX=  # default is no prefix
      - FRAMES_PER_SECOND=10
      - ACQUISITION_MODE=SingleFrame

      - TRANSMISSION_TYPE=Multicast
      - DESTINATION_PORT=46000

      - CONVERT_TO_FORMAT=RGB
      - PIXEL_TYPE=Mono8

      - EXPOSURE_TIME=6000
      - TIMEOUT_MS=5001
      - IMAGE_FORMAT=jpeg
      - IMAGE_QUALITY=100
      - IMAGE_ROTATION_ANGLE=180
      - IMAGE_ROI_LEFT=0.14
      - IMAGE_ROI_RIGHT=0.885
#      - EMULATE_CAMERA=true
#      - TEST_IMAGE=./test
#    volumes:
#      - ./testimages:/home/app/test
    ports:
      - 3956:3956
      - 46000:46000/udp  # set Streaming Port to fixed value with pylonViewer
      - 5005:5050  # external access port | for debugging

  inference-service:
    container_name: inference
    build:
      context: ./
      dockerfile: Inference.Dockerfile
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - LOGGING_LEVEL=DEBUG
#      - PREFIX=IF  # default is IF
#      - IF_MODEL_FILENAME=yolov7-tiny.onnx
      - IF_MODEL_IMAGE_SIZE=(544, 640)
      - IF_MODEL_PRECISION=fp32
#      - IF_MODEL_PRECISION=fp16
    volumes:
      - ./models/yolov7-tiny.onnx:/home/app/data/model.onnx:ro
#      - ./models/yolov7-tiny.onnx_fp16:/home/app/data/model.onnx
    ports:
      - 5006:5050  # external access port | only for debugging

  backend-service:
    container_name: backend
    build:
      context: ./
      dockerfile: Backend.Dockerfile
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - LOGGING_LEVEL=DEBUG
#      - PREFIX=BE  # default is BE
#      - BE_INFERENCE_URL=http://inference:5050/inference
#      - BE_CAMERA_URL=http://camera-adapter:5050/basler/continuous-acquisition/get-image
      - BE_CAMERA_URL=http://camera-adapter:5050/basler/single-frame-acquisition/take-photo
#      - BE_CAMERA_*
      - BE_CAMERA_TIMEOUT=5.1
      - BE_INFERENCE_TIMEOUT=2
      # model
      - BE_MODEL_MAPPING=./settings/class_map_CRU.csv
      - BE_PATTERN_FILE=./settings/desired_coordinates.yml
      # general
      - BE_GENERAL_SAVE_IMAGES=all
    volumes:
      - ./data:/home/app/data/:rw
    ports:
      - 5000:5050  # external access port | only for debugging

  inference-frontend:
    container_name: frontend-streamlit
    build:
      context: ./
      dockerfile: Frontend.Dockerfile
    image: schwmax/frontend
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      # variables to customize container
#      - PREFIX=FE  # default is FE
      # general configs
      - FE_GENERAL_URL_BACKEND="http://backend:5050/main"
#      - FE_GENERAL_TITLE="MVE for object recognition"
#      - FE_GENERAL_DESCRIPTION="loreipsum ..."
      # camera
#      - FE_CAMERA_SERIAL_NUMBER=0
      - FE_CAMERA_IP_ADDRESS=192.168.10.5
      - FE_CAMERA_SUBNET_MASK=255.255.255.0
      - FE_CAMERA_TRANSMISSION_TYPE=Multicast
      - FE_CAMERA_DESTINATION_IP_ADDRESS=192.168.10.223
      - FE_CAMERA_DESTINATION_PORT=46000
      - FE_CAMERA_IMAGE_FORMAT=jpeg
      - FE_CAMERA_IMAGE_QUALITY=100
#      - FE_CAMERA_PIXEL_TYPE=BayerRG8
#      - FE_CAMERA_CONVERT_TO_FORMAT=RGB
      # impress
      - FE_IMPRESS_PROJECT_NAME="Minimal Inference"
      - FE_IMPRESS_AUTHOR=SCHWMAX
#      - FE_IMPRESS_STATUS
#      - FE_IMPRESS_ADDITIONAL_INFO
      - FE_IMPRESS_PROJECT_LINK=https://github.com/max-scw/MinimalImageInferenceService.git

      # streamlit
      - STREAMLIT_THEME_PRIMARY_COLOR=#2D4275
    volumes:
      # mount folder to save images to
      - ./data/:/home/app/data/:rw
    ports:
      - 5001:8501  # external access port

  # ----- MONITORING -----
  prometheus-db-service:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    environment:
      - PROM_USERNAME=agent
      - PROM_PASSWORD=l8',ZD/vUhBL=V,W[LI&uSyoUbU~T<o,hZ.rL/uTw]
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus  # Persistent storage for Prometheus data
#    ports:
#      - 5007:9090  # only for debugging
#    depends_on:
#      - basler-camera-service
#      - backend-service
#      - inference-service

  grafana-service:
    image: grafana/grafana-oss:11.1.3
    container_name: grafana
    environment:
      - GF_LOG_LEVEL=debug
      - GF_SECURITY_ADMIN_PASSWORD=um]pAAmz(O{_1dvDLQHgxW9z90ql<mUBPwM0vmNc1fUz[sKy5)ITs[zfOjv<7Pfi-Je7grir}dGDKBP0FmsZ}(_s8In-8yvy7wa7
      - GF_SECURITY_ADMIN_USER=master
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/dashboard.json
    volumes:
#      - grafana_data:/var/lib/grafana  # Persistent storage for Grafana data. Not required as nothing should be changed
      - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./monitoring/grafana/dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
      - ./monitoring/grafana/dashboard.json:/var/lib/grafana/dashboards/dashboard.json:ro
    ports:
      - 5008:3000
    depends_on:
      - prometheus-db-service

volumes:
  prometheus_data:
#  grafana_data: