
services:
  basler-camera-service:
    container_name: camera-adapter
    image: maxscw/basler-camera-adapter:v0.6.6
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - LOGGING_LEVEL=DEBUG
#      - PREFIX=  # default is no prefix
      - ACQUISITION_MODE=SingleFrame
      - FASTAPI_ROOT_PATH="/camera"

#      - TRANSMISSION_TYPE=Multicast
#      - DESTINATION_PORT=46000
#      - IP_ADDRESS=1.1.1.5
#      - DESTINATION_IP_ADDRESS=1.1.1.222

      - CONVERT_TO_FORMAT=RGB
      - PIXEL_TYPE=Mono8

      - EXPOSURE_TIME=6000
      - TIMEOUT_MS=5001
      - IMAGE_FORMAT=jpeg
      - IMAGE_QUALITY=100

      - TEST_IMAGE=./test
    volumes:
      - ./test/test_images:/home/app/test
    ports:
      - 3956:3956
      - 46000:46000/udp  # set Streaming Port to fixed value with pylonViewer
      - 5005:5050  # external access port | for debugging


  inference-service:
    container_name: inference-engine
    image: maxscw/minimal-image-inference-engine:v0.3.2
#    build:
#      context: ./
#      dockerfile: Inference.Dockerfile
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - LOGGING_LEVEL=DEBUG
      - IF_MODEL_IMAGE_SIZE=(640, 640)
      - IF_MODEL_PRECISION=fp32
#      - ACCESS_TOKENS=fj48SL835sU#rdf
    volumes:
      - ./test/yolov7-tiny.onnx:/home/app/data/model.onnx:ro
    ports:
      - 5006:5052  # external access port | only for debugging


  backend-service:
    container_name: backend
    image: maxscw/minimal-image-inference-backend:v0.3.0
#    build:
#      context: ./
#      dockerfile: Backend.Dockerfile
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - LOGGING_LEVEL=DEBUG
      - BE_CAMERA_URL=http://camera-adapter:5050/basler/take-photo
      - BE_CAMERA_TIMEOUT=5.1

      - BE_INFERENCE_URL=http://inference-engine:5052/inference
      - BE_INFERENCE_TIMEOUT=2
#      - BE_INFERENCE_AUTH_TOKEN=fj48SL835sU#rdf
      # model
#      - BE_MODEL_MAPPING=./settings/class_map_CRU.csv
#      - BE_PATTERN_FILE=./desired_coordinates.yml
      # general
      - BE_GENERAL_SAVE_IMAGES=all
    volumes:
      - ./data:/home/app/data/:rw
    ports:
      - 5000:5051  # external access port | only for debugging


  frontend-service:
    container_name: frontend
    image: maxscw/minimal-image-inference-frontend:v0.3.1
#    build:
#      context: ./
#      dockerfile: Frontend.Dockerfile
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      # variables to customize container
      # general configs
      - FE_GENERAL_URL_BACKEND="http://backend:5051/main/with-camera"
      # camera
#      - FE_CAMERA_IP_ADDRESS=192.168.10.5
#      - FE_CAMERA_SUBNET_MASK=255.255.255.0
#      - FE_CAMERA_TRANSMISSION_TYPE=Multicast
#      - FE_CAMERA_DESTINATION_IP_ADDRESS=192.168.10.222
#      - FE_CAMERA_DESTINATION_PORT=46000
#      - FE_CAMERA_IMAGE_FORMAT=jpeg
#      - FE_CAMERA_IMAGE_QUALITY=100
#      - FE_CAMERA_PIXEL_TYPE=BayerRG8
#      - FE_CAMERA_CONVERT_TO_FORMAT=RGB
      # impress
      - FE_IMPRESS_PROJECT_NAME="Minimal Inference"
      - FE_IMPRESS_AUTHOR=max-scw
      - FE_IMPRESS_STATUS=Test
#      - FE_IMPRESS_ADDITIONAL_INFO
      - FE_IMPRESS_PROJECT_LINK=https://github.com/max-scw/MinimalImageInferenceService.git

      # streamlit
      - STREAMLIT_THEME_PRIMARY_COLOR=#2D4275
      - STREAMLIT_SERVER_HEADLESS=True
      - STREAMLIT_SERVER_ENABLE_CORS=False  # enableCORS
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=False  #enableXsrfProtection
    volumes:
      # mount folder to save images to
      - ./data/:/home/app/data/:rw
    ports:
      - 5001:8501  # external access port

  nginx-service:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 5100:80
    depends_on:
      - backend-service
      - basler-camera-service
      - frontend-service


#  # ----- MONITORING -----
#  prometheus-db-service:
#    image: prom/prometheus
#    container_name: prometheus
#    restart: unless-stopped
#    environment:
#      - PROM_USERNAME=agent
#      - PROM_PASSWORD=l8',ZD/vUhBL=V,W[LI&uSyoUbU~T<o,hZ.rL/uTw]
#    volumes:
#      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#      - prometheus_data:/prometheus  # Persistent storage for Prometheus data
##    ports:
##      - 5007:9090  # only for debugging
##    depends_on:
##      - basler-camera-service
##      - backend-service
##      - inference-service
#
#  grafana-service:
#    image: grafana/grafana-oss:11.1.3
#    container_name: grafana
#    environment:
#      - GF_LOG_LEVEL=debug
#      - GF_SECURITY_ADMIN_PASSWORD=um]pAAmz(O{_1dvDLQHgxW9z90ql<mUBPwM0vmNc1fUz[sKy5)ITs[zfOjv<7Pfi-Je7grir}dGDKBP0FmsZ}(_s8In-8yvy7wa7
#      - GF_SECURITY_ADMIN_USER=master
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
#      - GF_USERS_ALLOW_SIGN_UP=false
#      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/dashboard.json
#    volumes:
##      - grafana_data:/var/lib/grafana  # Persistent storage for Grafana data. Not required as nothing should be changed
#      - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
#      - ./monitoring/grafana/dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
#      - ./monitoring/grafana/dashboard.json:/var/lib/grafana/dashboards/dashboard.json:ro
#    ports:
#      - 5008:3000
#    depends_on:
#      - prometheus-db-service
#
#volumes:
#  prometheus_data:
##  grafana_data: